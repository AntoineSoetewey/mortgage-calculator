# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# slide 15
# Consider a temporary life annuity-immediate, where benefits are paid at the end of the year, as long as the insured (x) survives, for up a total of k years (k payments)
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- p[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# or as a function
LxTD<-datSTATBEL$Lx
TLAI <- function(capital=1,m=1,n,Lx=datSTATBEL$Lx,age,rate=.03) {
proba <- Lx[age+1+m:n]/Lx[age+1]
vap <- sum((1/(1+rate)^(m:n))*proba*capital)
return(vap)
}
TLAI(capital=100,n=20,age=40)
# slide 21
# For life (x), present value of a benefit of $1 payable at the end of the year of death, if death occurs within a fixed term n
# Term insurance, discrete case
A<- matrix(NA,m,m-1)
for(j in 1:(m-1)){ A[,j]<-cumsum(1/(1+i)^(1:m)*d[,j]) }
Ax <- A[nrow(A),1:(m-2)]
# slide 24
# A pure endowment benefit of $1, issued to a life aged x, with term of n years has present value
E <- matrix(0,m,m)
for(j in 1:m){ E[,j] <- (1/(1+i)^(1:m))*p[,j] }
E[10,45]
# or
p[10,45]/(1+i)^10
# slide 33
# Temporary life annuity-due
adot<-matrix(0,m,m)
for(j in 1:(m-1)){ adot[,j]<-cumsum(1/(1+i)^(0:(m-1))*c(1,p[1:(m-1),j])) }
adot[nrow(adot),1:5]
# slide 38
# Deferred annuities
h <- 1
adoth <- matrix(0,m,m-h)
for(j in 1:(m-1-h)){ adoth[,j]<-cumsum(1/(1+i)^(h+0:(m-1))*p[h+0:(m-1),j]) }
adoth[nrow(adoth),1:5]
# slide 48
# Premium calculation
x<-50;n<-30
premium <-A[n,x]/adot[n,x]
sum(premium/(1+i)^(0:(n-1))*c(1,p[1:(n-1),x]))
library(lifecontingencies)
TD <- demoFrance
demoFrance
data(demoFrance)
rm(list = ls())
library(lifecontingencies)
TD <- data(demoFrance)
str(TD)
rm(list = ls())
library(lifecontingencies)
data(demoFrance)
str(TD)
demoFrance
TD <- demoFrance
str(TD)
TD <- data.frame(Age = TD$age, Lx = TD$TD88_90)
Lx <- TD$Lx
m <- length(Lx)
p <- matrix(0, m, m)
d <- p
for (i in 1:(m - 1)) {
p[1:(m - i), i] <- Lx[1 + (i + 1):m] / Lx[i + 1]
d[1:(m - i), i] <- (Lx[(1 + i):(m)] - Lx[(1 + i):(m) + 1]) / Lx[i + 1]
}
diag(d[(m - 1):1, ]) <- 0
diag(p[(m - 1):1, ]) <- 0
q <- 1 - p
# slide 12 of Arthur Charpentier
life.exp=function(x){sum(p[1:nrow(p),x])}
life.exp(45)
# slide 14
# Consider a whole life insurance, for some insured aged x, where benefits are payables following the death, if it occurs with k years from issue
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- d[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# slide 15
# Consider a temporary life annuity-immediate, where benefits are paid at the end of the year, as long as the insured (x) survives, for up a total of k years (k payments)
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- p[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# or as a function
LxTD<-datSTATBEL$Lx
# or as a function
LxTD<-TD$Lx
TLAI <- function(capital=1,m=1,n,Lx=datSTATBEL$Lx,age,rate=.03) {
proba <- Lx[age+1+m:n]/Lx[age+1]
vap <- sum((1/(1+rate)^(m:n))*proba*capital)
return(vap)
}
TLAI(capital=100,n=20,age=40)
rm(list = ls())
library(lifecontingencies)
data(demoFrance)
TD <- demoFrance
str(TD)
TD <- data.frame(Age = TD$age, Lx = TD$TD88_90)
Lx <- TD$Lx
m <- length(Lx)
p <- matrix(0, m, m)
d <- p
for (i in 1:(m - 1)) {
p[1:(m - i), i] <- Lx[1 + (i + 1):m] / Lx[i + 1]
d[1:(m - i), i] <- (Lx[(1 + i):(m)] - Lx[(1 + i):(m) + 1]) / Lx[i + 1]
}
diag(d[(m - 1):1, ]) <- 0
diag(p[(m - 1):1, ]) <- 0
q <- 1 - p
# slide 12 of Arthur Charpentier
life.exp=function(x){sum(p[1:nrow(p),x])}
life.exp(45)
# slide 14
# Consider a whole life insurance, for some insured aged x, where benefits are payables following the death, if it occurs with k years from issue
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- d[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# slide 15
# Consider a temporary life annuity-immediate, where benefits are paid at the end of the year, as long as the insured (x) survives, for up a total of k years (k payments)
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- p[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# or as a function
LxTD<-TD$Lx
TLAI <- function(capital=1,m=1,n,Lx=TD$Lx,age,rate=.03) {
proba <- Lx[age+1+m:n]/Lx[age+1]
vap <- sum((1/(1+rate)^(m:n))*proba*capital)
return(vap)
}
TLAI(capital=100,n=20,age=40)
# slide 21
# For life (x), present value of a benefit of $1 payable at the end of the year of death, if death occurs within a fixed term n
# Term insurance, discrete case
A<- matrix(NA,m,m-1)
for(j in 1:(m-1)){ A[,j]<-cumsum(1/(1+i)^(1:m)*d[,j]) }
Ax <- A[nrow(A),1:(m-2)]
# slide 24
# A pure endowment benefit of $1, issued to a life aged x, with term of n years has present value
E <- matrix(0,m,m)
for(j in 1:m){ E[,j] <- (1/(1+i)^(1:m))*p[,j] }
E[10,45]
# or
p[10,45]/(1+i)^10
# slide 33
# Temporary life annuity-due
adot<-matrix(0,m,m)
for(j in 1:(m-1)){ adot[,j]<-cumsum(1/(1+i)^(0:(m-1))*c(1,p[1:(m-1),j])) }
adot[nrow(adot),1:5]
# slide 38
# Deferred annuities
h <- 1
adoth <- matrix(0,m,m-h)
for(j in 1:(m-1-h)){ adoth[,j]<-cumsum(1/(1+i)^(h+0:(m-1))*p[h+0:(m-1),j]) }
adoth[nrow(adoth),1:5]
# slide 48
# Premium calculation
x<-50;n<-30
premium <-A[n,x]/adot[n,x]
sum(premium/(1+i)^(0:(n-1))*c(1,p[1:(n-1),x]))
# or
sum(1/(1+i)^(1:n)*d[1:n,x])
rm(list = ls())
library(lifecontingencies)
data(demoFrance)
TD <- demoFrance
str(TD)
TD <- data.frame(Age = TD$age, Lx = TD$TD88_90)
Lx <- TD$Lx
m <- length(Lx)
p <- matrix(0, m, m)
d <- p
for (i in 1:(m - 1)) {
p[1:(m - i), i] <- Lx[1 + (i + 1):m] / Lx[i + 1]
d[1:(m - i), i] <- (Lx[(1 + i):(m)] - Lx[(1 + i):(m) + 1]) / Lx[i + 1]
}
diag(d[(m - 1):1, ]) <- 0
diag(p[(m - 1):1, ]) <- 0
q <- 1 - p
# slide 12 of Arthur Charpentier
life.exp=function(x){sum(p[1:nrow(p),x])}
life.exp(45)
# slide 14
# Consider a whole life insurance, for some insured aged x, where benefits are payables following the death, if it occurs with k years from issue
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- d[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# slide 15
# Consider a temporary life annuity-immediate, where benefits are paid at the end of the year, as long as the insured (x) survives, for up a total of k years (k payments)
k<-20;x<-40;i<-0.03
C <- rep(100,k)
P <- p[1:k,x]
sum((1/(1+i)^(1:k))*P*C)
# or
sum(cumprod(rep(1/(1+i),k))*P*C)
# or as a function
LxTD<-TD$Lx
TLAI <- function(capital=1,m=1,n,Lx=TD$Lx,age,rate=.03) {
proba <- Lx[age+1+m:n]/Lx[age+1]
vap <- sum((1/(1+rate)^(m:n))*proba*capital)
return(vap)
}
TLAI(capital=100,n=20,age=40)
# slide 21
# For life (x), present value of a benefit of $1 payable at the end of the year of death, if death occurs within a fixed term n
# Term insurance, discrete case
A<- matrix(NA,m,m-1)
for(j in 1:(m-1)){ A[,j]<-cumsum(1/(1+i)^(1:m)*d[,j]) }
Ax <- A[nrow(A),1:(m-2)]
# slide 24
# A pure endowment benefit of $1, issued to a life aged x, with term of n years has present value
E <- matrix(0,m,m)
for(j in 1:m){ E[,j] <- (1/(1+i)^(1:m))*p[,j] }
E[10,45]
# or
p[10,45]/(1+i)^10
# slide 33
# Temporary life annuity-due
adot<-matrix(0,m,m)
for(j in 1:(m-1)){ adot[,j]<-cumsum(1/(1+i)^(0:(m-1))*c(1,p[1:(m-1),j])) }
adot[nrow(adot),1:5]
# slide 38
# Deferred annuities
h <- 1
adoth <- matrix(0,m,m-h)
for(j in 1:(m-1-h)){ adoth[,j]<-cumsum(1/(1+i)^(h+0:(m-1))*p[h+0:(m-1),j]) }
adoth[nrow(adoth),1:5]
# slide 48
# Premium calculation
x<-50;n<-30
premium <-A[n,x]/adot[n,x]
sum(premium/(1+i)^(0:(n-1))*c(1,p[1:(n-1),x]))
library(demography)
install.packages("demography")
library(demography)
france.lt <- lifetable(fr.mort)
plot(france.lt)
france.lt <- lifetable(fr.mort)
plot(france.lt)
View(france.lt)
lt1990 <- print(lifetable(fr.mort,year=1990))
france.LC <- lca(fr.mort)
france.fcast <- forecast(france.LC)
france.lt.f <- lifetable(france.fcast)
plot(france.lt.f)
# Birth cohort lifetables, 1900-1910
france.clt <- lifetable(fr.mort,type="cohort",age=0, years=1900:1910)
# Partial cohort lifetables for 1950
lifetable(fr.mort,type="cohort",years=1950)
datSTATBEL <- read.csv("~/Google Drive/PhD/Thesis/Papers/my_papers/paper2/DATA/TMAR-all_FR.csv",
skip = 2,
dec = ".")
View(datSTATBEL)
demoIta
######
data("demoIta")
View(demoIta)
datSTATBEL <- read.csv("~/Google Drive/PhD/Thesis/Papers/my_papers/paper2/DATA/TMAR-all_FR.csv",
skip = 2,
dec = ".")
bel <- new("lifetable",x=datSTATBEL$Age,
lx=datSTATBEL$Lx, name='bel')
View(bel)
bel@x
bel@lx
bel@name
getOmega(bel)
tail(bel)
res <- rLife(n = 1000, object = bel, x = 65)
hist(rest)
hist(res)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
hist(res)
demo("pricing")
str(lifecontingencies)
library(lifecontingencies)
str(lifecontingencie)
str(lifecontingencies)
demo
str(demo)
View(demo)
demo("demography")
summary(bel)
pxt(bel, 25, 40)
qxt(bel, 65, 20)
exn(object = bel)
exn(object = bel, x = 50, n = 60 - 50, type = "curtate")
exn(object = bel, x = 50, n = 60 - 50, type = "complete")
pxt(bel, x = 80.25, t = 0.5, fractional = "linear")
bel$x
bel@x
###
data(soaLt)
View(soaLt)
bel_dat <- as(bel, "data.frame")
View(bel_dat)
belact <- new("actuarialtable", x = bel_dat$x, lx = bel_dat$lx, interest = 0.06)
View(belact)
belact_dat <- as(bel_act, "data.frame")
belact_dat <- as(belact, "data.frame")
View(belact_dat)
1000 * Axn(actuarialtable = belact, x = 36, n = 3)
100000 * Axn(actuarialtable = belact, x = 36, n = 3)
100000 * Axn(actuarialtable = belact, x = c(36:40), n = 3)
100000 * Axn(actuarialtable = belact, x = c(36:40), n = c(0:3)
100000 * Axn(actuarialtable = belact, x = c(36:40), n = c(0:3))
100000 * Axn(actuarialtable = belact, x = c(36:40), n = c(0:3))
100000 * Axn(actuarialtable = belact, x = c(36:40), n = 3)
axn(actuarialtable = belact, x = 65)
exn(bel, x = 65)
axn(actuarialtable = belact, x = 65)
Axn(actuarialtable = belact, x = 65)
axn(actuarialtable = belact, x = 65)
1000 * axn(actuarialtable = belact, x = 25, n = 45 - 25)
View(Axn)
View(axn)
V <- function(t) Axn(soa08Act,60+t,30-t)-P*axn(soa08Act,60+t,30-t)
VecT <- seq(0,30)
plot(VecT,Vectorize(V)(VecT),type="b")
shiny::runApp('Documents/GitHub/mortgage-calculator')
runApp('Documents/GitHub/mortgage-calculator')
shiny::runApp()
mortgage <- function(P=500000, I=6, L=30, amort=T, plotData=T) {
J <- I/(12 * 100)
N <- 12 * L
M <- P*J/(1-(1+J)^(-N))
monthPay <<- M
cat("\nThe payments for this loan are:\n
Monthly payment: $", M, " (stored in monthPay)\n
Total cost: $", M*N, "\n\n", sep="")
# Calculate Amortization for each Month
if(amort==T) {
Pt <- P # current principal or amount of the loan
currP <- NULL
while(Pt>=0) {
H <- Pt * J # this is the current monthly interest
C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month
Q <- Pt - C # this is the new balance of your principal of your loan
Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero
currP <- c(currP, Pt)
}
monthP <- c(P, currP[1:(length(currP)-1)])-currP
aDFmonth <<- data.frame(
Amortization=c(P, currP[1:(length(currP)-1)]),
Monthly_Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),
Monthly_Principal=monthP,
Monthly_Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0),
Year=sort(rep(1:ceiling(N/12), 12))[1:length(monthP)]
)
aDFyear <- data.frame(
Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max),
Annual_Payment=tapply(aDFmonth$Monthly_Payment, aDFmonth$Year, sum),
Annual_Principal=tapply(aDFmonth$Monthly_Principal, aDFmonth$Year, sum),
Annual_Interest=tapply(aDFmonth$Monthly_Interest, aDFmonth$Year, sum),
Year=as.vector(na.omit(unique(aDFmonth$Year)))
)
aDFyear <<- aDFyear
cat("The amortization data for each of the", N, "months are stored in \"aDFmonth\".\n\n")
cat("The amortization data for each of the", L, "years are stored in \"aDFyear\".\n\n")
}
if(plotData==T) {
barplot(t(aDFyear[,c(3,4)]),
col=c("blue", "red"),
main="Annual Interest and Principal Payments",
sub="The data for this plot is stored in aDFyear.",
xlab="Years", ylab="$ Amount",
legend.text=c("Principal", "Interest"),
ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
cat("The monthly mortgage payments and amortization rates can be calculted with the mortgage() function like this: \n
mortgage(P=500000, I=6, L=30, amort=T, plotData=T)
P = principal (loan amount)
I = annual interest rate
L = length of the loan in years \n")
mortgage(P=500000, I=6, L=30, amort=T, plotData=T)
runApp()
shiny::runApp()
runApp()
mortgage <- function(P=500000, I=6, L=30, amort=TRUE, plotData=TRUE) {
J <- I/(12 * 100)
N <- 12 * L
M <- P*J/(1-(1+J)^(-N))
monthPay <<- M
text <- cat("\nThe payments for this loan are:\n
Monthly payment: $", M, " (stored in monthPay)\n
Total cost: $", M*N, "\n\n", sep="")
# Calculate Amortization for each Month
if(amort==T) {
Pt <- P # current principal or amount of the loan
currP <- NULL
while(Pt>=0) {
H <- Pt * J # this is the current monthly interest
C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month
Q <- Pt - C # this is the new balance of your principal of your loan
Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero
currP <- c(currP, Pt)
}
monthP <- c(P, currP[1:(length(currP)-1)])-currP
aDFmonth <<- data.frame(
Amortization=c(P, currP[1:(length(currP)-1)]),
Monthly_Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),
Monthly_Principal=monthP,
Monthly_Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0),
Year=sort(rep(1:ceiling(N/12), 12))[1:length(monthP)]
)
aDFyear <- data.frame(
Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max),
Annual_Payment=tapply(aDFmonth$Monthly_Payment, aDFmonth$Year, sum),
Annual_Principal=tapply(aDFmonth$Monthly_Principal, aDFmonth$Year, sum),
Annual_Interest=tapply(aDFmonth$Monthly_Interest, aDFmonth$Year, sum),
Year=as.vector(na.omit(unique(aDFmonth$Year)))
)
aDFyear <<- aDFyear
cat("The amortization data for each of the", N, "months are stored in \"aDFmonth\".\n\n")
cat("The amortization data for each of the", L, "years are stored in \"aDFyear\".\n\n")
}
if(plotData==T) {
barplot(t(aDFyear[,c(3,4)]),
col=c("blue", "red"),
main="Annual Interest and Principal Payments",
sub="The data for this plot is stored in aDFyear.",
xlab="Years", ylab="$ Amount",
legend.text=c("Principal", "Interest"),
ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
mortgage(P = 200000, I = 2, L = 30)
str(mortgage(P = 200000, I = 2, L = 30))
mortgage <- function(P=500000, I=6, L=30, amort=TRUE, plotData=TRUE) {
J <- I/(12 * 100)
N <- 12 * L
M <- P*J/(1-(1+J)^(-N))
monthPay <<- M
text <- cat("\nThe payments for this loan are:\n
Monthly payment: $", M, " (stored in monthPay)\n
Total cost: $", M*N, "\n\n", sep="")
# Calculate Amortization for each Month
if(amort==T) {
Pt <- P # current principal or amount of the loan
currP <- NULL
while(Pt>=0) {
H <- Pt * J # this is the current monthly interest
C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month
Q <- Pt - C # this is the new balance of your principal of your loan
Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero
currP <- c(currP, Pt)
}
monthP <- c(P, currP[1:(length(currP)-1)])-currP
aDFmonth <<- data.frame(
Amortization=c(P, currP[1:(length(currP)-1)]),
Monthly_Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),
Monthly_Principal=monthP,
Monthly_Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0),
Year=sort(rep(1:ceiling(N/12), 12))[1:length(monthP)]
)
aDFyear <- data.frame(
Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max),
Annual_Payment=tapply(aDFmonth$Monthly_Payment, aDFmonth$Year, sum),
Annual_Principal=tapply(aDFmonth$Monthly_Principal, aDFmonth$Year, sum),
Annual_Interest=tapply(aDFmonth$Monthly_Interest, aDFmonth$Year, sum),
Year=as.vector(na.omit(unique(aDFmonth$Year)))
)
aDFyear <<- aDFyear
cat("The amortization data for each of the", N, "months are stored in \"aDFmonth\".\n\n")
cat("The amortization data for each of the", L, "years are stored in \"aDFyear\".\n\n")
}
if(plotData==T) {
barplot(t(aDFyear[,c(3,4)]),
col=c("blue", "red"),
main="Annual Interest and Principal Payments",
sub="The data for this plot is stored in aDFyear.",
xlab="Years", ylab="$ Amount",
legend.text=c("Principal", "Interest"),
ylim=c(0, max(aDFyear$Annual_Payment)*1.3))
}
}
mortgage()
text
cat("\nThe payments for this loan are:\n
Monthly payment: $", M, " (stored in monthPay)\n
Total cost: $", M*N, "\n\n", sep="")
mortgage()$text
View(mortgage())
str(mortgage)
M
monthPay
runApp()
monthPay
runApp()
shiny::runApp()
install.packages("styler")
styler:::style_active_file()
runApp()
